---        
- name: Grade for logins
  hosts: utilities
  gather_facts: false
  become: true    
  tasks:   
    - name: Setup strong passwords
      set_fact:
        gitlab_server_user_token: "{{ lookup('password', '/dev/null length=20 chars=ascii_letters,digits') }}"
           
    - name: Generate gitlab token
      command: >-
        gitlab-rails runner "
        token = User.find_by_username('devops').personal_access_tokens.create(scopes: [:api, :read_api, :read_repository], 
        name: 'Automation token'); 
        token.set_token('{{ gitlab_server_user_token }}'); 
        token.save!
        "  
       
- name: Grade for logins
  hosts: localhost
  gather_facts: false
  become: false
  vars_files:
    - vars.yml
  tasks:   
    - set_fact:
        gitlab_server_user_token: "{{ hostvars['utility.example.com']['gitlab_server_user_token'] }}"

    - debug: var=gitlab_server_user_token

##### credentials section 
    - name: Credential's List
      uri: 
        url: https://{{ tower_hostname }}/api/v2/credentials/
        user: devops
        password: "{{ tower_admin_password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        status_code: 200
      register: credential_list

    - set_fact:
        credential_names : "{{ credential_names |d([]) + [ item.id  | string + ':' + item.name ] }}"
      loop: "{{ credential_list.json.results }}"

    - name: find id of gitlab_token credentials
      set_fact: 
        gitlab_token_id: "{{ item.split(':')[0] }}"
      loop: "{{ credential_names }}"
      when: '"gitlab_token" in item'

    - name: Delete credential if already exist
      uri: 
        url: https://{{ tower_hostname }}/api/v2/credentials/{{ gitlab_token_id }}/
        user: devops
        password: "{{ tower_admin_password }}"
        method: DELETE
        body_format: json
        force_basic_auth: yes
        validate_certs: false
        status_code: 204
      when: gitlab_token_id | d('') | length > 0  

    - name: Create gitlab token
      uri: 
        url: https://{{ tower_hostname }}/api/v2/credentials/
        user: devops
        password: "{{ tower_admin_password }}"
        method: POST
        body_format: json
        force_basic_auth: yes
        validate_certs: false
        status_code: 201
        body: >-
          {
              "name": "gitlab_token",
              "description": "Gitlab Personal Access Token",
              "organization": 1,
              "credential_type": 13,
              "inputs": {
                  "token": "{{ gitlab_server_user_token }}"
              },
              "user": null,
              "team": null
          }

#### Re run credentials list if gitlab_token
    - name: Credential's List
      uri: 
        url: https://{{ tower_hostname }}/api/v2/credentials/
        user: devops
        password: "{{ tower_admin_password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        status_code: 200
      register: credential_list

    - set_fact:
        credential_names : "{{ credential_names |d([]) + [ item.id  | string + ':' + item.name ] }}"
      loop: "{{ credential_list.json.results }}"

    - name: find id of gitlab_token credentials
      set_fact: 
        gitlab_token_id: "{{ item.split(':')[0] }}"
      loop: "{{ credential_names }}"
      when: '"gitlab_token" in item'

    - debug: var=credential_names  
    - debug: var=gitlab_token_id
## Credentials section ends here 
## Job Template section starts here  
           
    - name: Jobtemplate list
      uri: 
        url: https://{{ tower_hostname }}/api/v2/job_templates/
        user: devops
        password: "{{ tower_admin_password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        status_code: 200
      register: jobtemplate_list

    - name: find id for Prod job template
      set_fact: 
        test_job_template_id: "{{ item.id }}"
      loop: "{{ jobtemplate_list.json.results }}"
      when: '"Test" in item.name' 

    - name: find id for Prod job template
      set_fact: 
        prod_job_template_id: "{{ item.id }}"
      loop: "{{ jobtemplate_list.json.results }}"
      when: '"Prod" in item.name'    

    - name: Jobtemplate update with webhook
      loop: "{{ jobtemplate_list.json.results }}"
      register: jt_output
      uri: 
        url: https://{{ tower_hostname }}/api/v2/job_templates/{{ item.id }}/
        user: devops
        password: "{{ tower_admin_password }}"
        method: PATCH
        body_format: json
        force_basic_auth: yes
        validate_certs: false
        status_code: 200
        body: >-
          {
            "webhook_service": "gitlab",
            "webhook_credential": "{{ gitlab_token_id }}"
          }
           
    - name: Jobtemplate webhook key
      loop: "{{ jobtemplate_list.json.results }}"
      uri: 
        url: https://{{ tower_hostname }}/api/v2/job_templates/{{ item.id }}/webhook_key/
        user: devops
        password: "{{ tower_admin_password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        status_code: 200
      register: jt_webhook
           
    - set_fact:
        jobtemplate_webhooks : "{{ jobtemplate_webhooks |d([]) + [ item.json.webhook_key | string + '--' + item.url | replace('webhook_key','gitlab')  ] }}"
      loop: "{{ jt_webhook.results }}"
           
    - debug: 
        msg: "{{ item.id }}:{{ item.name}}"
        verbosity: 2
      loop: "{{ jobtemplate_list.json.results }}"

    - debug: var=jobtemplate_webhooks

### gitlab webhooks push and merge events

    - name: Create Test webhook in gitlab
      uri:
        url: http://utility.example.com//api/v4/projects/1/hooks/
        method: POST
        headers:
          PRIVATE-TOKEN: "{{ gitlab_server_user_token }}"
        body_format: form-urlencoded
        status_code: 201
        body:
          enable_ssl_verification: false
          push_events: true
          push_events_branch_filter: test
          url: "{{ item.split('--')[1] }}"
          token: "{{ item.split('--')[0] }}"     
      loop: "{{ jobtemplate_webhooks }}"
      when: '"/" + test_job_template_id + "/" in item'

    - name: Create Test webhook in gitlab
      uri:
        url: http://utility.example.com//api/v4/projects/1/hooks/
        method: POST
        headers:
          PRIVATE-TOKEN: "{{ gitlab_server_user_token }}"
        body_format: form-urlencoded
        status_code: 201
        body:
          enable_ssl_verification: false
          push_events: true
          push_events_branch_filter: prod
          merge_requests_events: true
          url: "{{ item.split('--')[1] }}"
          token: "{{ item.split('--')[0] }}"   
      loop: "{{ jobtemplate_webhooks }}"
      when: '"/" + prod_job_template_id + "/" in item'

#### gitlab commands
    - name: copy site.yml playbook to materials
      copy:
        src: ./file/site.yml
        dest: /home/devops/materials
        owner: devops
        mode: 0644

    - name: Gitlab clone project
      command: git clone git@utility.example.com:ansible/gitops-lab.git
      args:
        chdir: /home/devops/

    - name: Gitlab push event
      command: "{{ __command }}"
      args:
        chdir: /home/devops/gitops-lab
      loop:
        - git checkout test
        - cp /home/devops/materials/site.yml .
        - git add .
        - git commit -m "site.yml update"
        - git push 
      loop_control:
        loop_var: __command

    - name: Gitlab merge event
      command: "{{ __command }}"
      args:
        chdir: /home/devops/gitops-lab
      loop: 
        - git checkout prod
        - git merge test
        - git push 
      loop_control:
        loop_var: __command

...