- hosts:
    - localhost
  connection: local
  gather_facts: no
  tasks:
    - name: running section1
      debug:
        msg: "Running Section2"
    - set_fact:
        grade_temp_section2_1: "PASS"
        grade_temp_section2_2: "PASS"
        #grade_reason: ""


- name: infra-ec2-wait_for_linux_hosts
  hosts:
    - all:!windows
  become: true
  gather_facts: no
  roles:
  - { role: "infra-ec2-wait_for_linux_hosts" }

- import_playbook: ./solve_section2.yml
  when: solve == "true"

- name: Verify Section2
  hosts: apps
  gather_facts: yes
  tasks:
  

  - name: Gather Facts
    setup:
      filter: ansible_local
   
  - debug: var=ansible_facts
  - block:
    - block:
        - name: Fail if custom facts are incorrect
          set_fact:
              grade_temp_section2_1: FAIL
              grade_reason_section2_1: "{{hostvars['localhost']['grade_reason']}},{{inventory_hostname}} custom facts are not setup correctly."
          when: ( ansible_facts.ansible_local.custom.general.package != "httpd" ) or 
                ( ansible_facts.ansible_local.custom.general.service != "httpd" ) or 
                ( ansible_facts.ansible_local.custom.general.state != "started" ) 
          #( ansible_facts.ansible_local == "" ) or ( ansible_facts.ansible_local.custom.general.package not defined ) or 
          delegate_to: localhost
          delegate_facts: true
          ignore_errors: yes
      when: ansible_facts.ansible_local.custom is defined
    always: 
      - name: Setting up grade reason
        set_fact:
          grade_temp_section2_1: FAIL
          grade_reason_section2_1: "{{hostvars['localhost']['grade_reason']}},{{inventory_hostname}} custom variable is not set properly"
        when: ansible_facts.ansible_local.custom is not defined
        ignore_errors: yes 
        delegate_to: localhost
        delegate_facts: true

    
    

  - name: Success if custom facts setup correctly
    debug:
      msg: "Success: custom facts setup correctly."
    when: 
      - ansible_facts.ansible_local.custom.general.package == "httpd"
      - ansible_facts.ansible_local.custom.general.service == "httpd"
      - ansible_facts.ansible_local.custom.general.state == "started"
    ignore_errors: yes
    
     
  - name: Check httpd service status
    shell: systemctl status httpd
    register: status
    ignore_errors: yes


  - name: Fail if httpd service is not started
    set_fact:
        grade_temp_section2_2: FAIL
        grade_reason_section2_2: "{{hostvars['localhost']['grade_reason']}},{{inventory_hostname}} httpd service is not started"
    when: status.failed
    ignore_errors: yes 
    delegate_to: localhost
    delegate_facts: true

  - name: Success if httpd is started
    debug: 
      msg: "Success: httpd service is started."
    when: not status.failed
    ignore_errors: yes
