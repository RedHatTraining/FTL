---
- name: Solve the OCP4 on OpenStack machine management lab
  hosts: localhost
  gather_facts: false
  become: false
  environment:
    KUBECONFIG: "{{ lookup('env', 'HOME') }}/openstack-upi/auth/kubeconfig"
    INFRA_ID: "INFRA_ID=$(jq -r .infraID {{ lookup('env', 'HOME') }}/openstack-upi/metadata.json)"

  tasks:
    - name: Set python version
      set_fact:
        ansible_python_interpreter: /usr/bin/python3
      tags: test

    - name: Get infra_id
      shell: "jq -r .infraID $HOME/openstack-upi/metadata.json"
      register: r_infra_id
      tags: test

    - name: Create worker machineset templates
      template:
        src: "./templates/worker-ms.yaml.j2"
        dest: "$HOME/worker-ms-{{ item }}.yaml"
      vars:
        INFRA_ID: "{{ r_infra_id.stdout }}"
        GUID: "{{ lookup('env', 'GUID') }}"
      loop:
        - 1a
        - 1b

    - name: Create new worker MachineSets
      k8s:
        state: present
        src: "$HOME/worker-ms-{{ item }}.yaml"
      loop:
        - 1a
        - 1b
    
    - name: Create infra MachineSet templates
      template:
        src: ./templates/infra-ms.yaml.j2
        dest: "$HOME/infra-ms.yaml"
      vars:
        INFRA_ID: "{{ r_infra_id.stdout }}"
        GUID: "{{ lookup('env', 'GUID') }}"

    - name: Create new infra MachineSet
      k8s:
        state: present
        src: "$HOME/infra-ms.yaml"

    - name: Get current worker nodes
      shell: oc get nodes --no-headers -l node-role.kubernetes.io/general-use
      register: r_worker_nodes

    - name: get current infra nodes
      shell: oc get nodes --no-headers -l node-role.kubernetes.io/infra
      register: r_infra_nodes
      
    - name: Check for worker nodes
      when: (r_worker_nodes.stdout_lines | length < 2) or (r_infra_nodes.stdout_lines | length < 1)
      block:
        - name: Wait 7 minutes for new worker nodes to come online
          pause:
            seconds: 420

        - name: Get worker nodes
          shell: oc get nodes --no-headers -l node-role.kubernetes.io/general-use
          register: r_new_worker_nodes

        - name: r_new_worker_nodes debug
          debug:
            var: r_new_worker_nodes

        - name: get current infra nodes
          shell: oc get nodes --no-headers -l node-role.kubernetes.io/infra
          register: r_new_infra_nodes
          
        - name: r_new_infra_nodes debug
          debug:
            var: r_new_infra_nodes

        - name: Check that new nodes are online
          assert:
            that:
              - r_new_worker_nodes.stdout_lines | length >= 2
              - r_new_infra_nodes.stdout_lines | length == 1
            fail_msg: "Something is wrong and your new machines are not starting"

      rescue:
        - name: Wait 2 minutes for nodes to appear
          pause:
            minutes: 2

        - name: Get worker nodes
          shell: oc get nodes --no-headers -l node-role.kubernetes.io/general-use
          register: r_newest_worker_nodes

        - name: get current infra nodes
          shell: oc get nodes --no-headers -l node-role.kubernetes.io/infra
          register: r_newest_infra_nodes
          
        - name: Check that new nodes are online
          assert:
            that:
              - r_newest_worker_nodes.stdout_lines | length >= 2
              - r_newest_infra_nodes.stdout_lines | length == 1
            fail_msg: "Something is wrong and your new machines are not starting. MTFBWY. Always."

    - name: Drain and cordon manual workers
      shell: oc adm drain $INFRA_ID-worker-{{ item }} --ignore-daemonsets --delete-local-data --force=true
      environment:
        INFRA_ID: "{{ r_infra_id.stdout }}"
      loop:
        - 0
        - 1
      tags: test

    - pause:
        seconds: 30

    - name: Delete nodes
      shell: oc delete node {{ r_infra_id.stdout }}-worker-{{ item }}
      loop:
        - 0
        - 1

    - name: Delete OpenStack instances
      shell: openstack server list --name {{ r_infra_id.stdout }}-worker -f value -c ID | xargs openstack server delete

    - name: Wait for the instances to delete
      pause:
        seconds: 30

    - name: Make sure instances are gone
      shell: openstack server list --name {{r_infra_id.stdout }}-worker
      register: r_osp_instances
    
    - debug:
        var: r_osp_instances

    - name: Make sure instances are gone
      assert:
        that:
          r_osp_instances.stdout_lines | length == 0